//
// This C-language parser header was generated by APG Version 7.0.
// User modifications may cause unpredictable results.
//
/*  *************************************************************************************
    Copyright (c) 2021, Lowell D. Thomas
    All rights reserved.

    This file was generated by and is part of APG Version 7.0.
    APG Version 7.0 may be used under the terms of the BSD 2-Clause License.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*   *************************************************************************************/

#ifndef _HTTP_H_
#define _HTTP_H_

// rule ids
#define HTTP_ABSOLUTE_FORM 14
#define HTTP_ABSOLUTE_PATH 15
#define HTTP_ABSOLUTE_URI 69
#define HTTP_ALPHA 102
#define HTTP_ASTERISK_FORM 16
#define HTTP_AUTHORITY 73
#define HTTP_AUTHORITY_FORM 17
#define HTTP_BIT 103
#define HTTP_BWS 0
#define HTTP_CHAR 104
#define HTTP_CHUNK 18
#define HTTP_CHUNK_DATA 19
#define HTTP_CHUNK_EXT 20
#define HTTP_CHUNK_EXT_NAME 21
#define HTTP_CHUNK_EXT_VAL 22
#define HTTP_CHUNK_SIZE 23
#define HTTP_CHUNKED_BODY 24
#define HTTP_COMMENT 25
#define HTTP_CONNECTION 1
#define HTTP_CONNECTION_OPTION 26
#define HTTP_CONTENT_LENGTH 2
#define HTTP_CR 105
#define HTTP_CRLF 106
#define HTTP_CTEXT 27
#define HTTP_CTL 107
#define HTTP_DEC_OCTET 83
#define HTTP_DIGIT 108
#define HTTP_DQUOTE 109
#define HTTP_FIELD_CONTENT 28
#define HTTP_FIELD_NAME 29
#define HTTP_FIELD_VALUE 30
#define HTTP_FIELD_VCHAR 31
#define HTTP_FRAGMENT 96
#define HTTP_GEN_DELIMS 100
#define HTTP_H16 80
#define HTTP_HEADER_FIELD 32
#define HTTP_HEXDIG 110
#define HTTP_HIER_PART 67
#define HTTP_HOST 6
#define HTTP_HTAB 111
#define HTTP_HTTP_MESSAGE 3
#define HTTP_HTTP_NAME 4
#define HTTP_HTTP_URI 33
#define HTTP_HTTP_VERSION 5
#define HTTP_HTTPS_URI 34
#define HTTP_IP_LITERAL 77
#define HTTP_IPV4ADDRESS 82
#define HTTP_IPV6ADDRESS 79
#define HTTP_IPVFUTURE 78
#define HTTP_LAST_CHUNK 35
#define HTTP_LF 112
#define HTTP_LS32 81
#define HTTP_LWSP 113
#define HTTP_MESSAGE_BODY 36
#define HTTP_METHOD 37
#define HTTP_OBS_FOLD 38
#define HTTP_OBS_TEXT 39
#define HTTP_OCTET 114
#define HTTP_ORIGIN_FORM 40
#define HTTP_OWS 7
#define HTTP_PARTIAL_URI 41
#define HTTP_PATH 85
#define HTTP_PATH_ABEMPTY 86
#define HTTP_PATH_ABSOLUTE 87
#define HTTP_PATH_EMPTY 90
#define HTTP_PATH_NOSCHEME 88
#define HTTP_PATH_ROOTLESS 89
#define HTTP_PCHAR 94
#define HTTP_PCT_ENCODED 97
#define HTTP_PORT 76
#define HTTP_PROTOCOL 42
#define HTTP_PROTOCOL_NAME 43
#define HTTP_PROTOCOL_VERSION 44
#define HTTP_PSEUDONYM 45
#define HTTP_QDTEXT 46
#define HTTP_QUERY 95
#define HTTP_QUOTED_PAIR 47
#define HTTP_QUOTED_STRING 48
#define HTTP_RANK 49
#define HTTP_REASON_PHRASE 50
#define HTTP_RECEIVED_BY 51
#define HTTP_RECEIVED_PROTOCOL 52
#define HTTP_REG_NAME 84
#define HTTP_RELATIVE_PART 71
#define HTTP_RELATIVE_REF 70
#define HTTP_REQUEST_LINE 53
#define HTTP_REQUEST_TARGET 54
#define HTTP_RESERVED 99
#define HTTP_RWS 8
#define HTTP_SCHEME 72
#define HTTP_SEGMENT 91
#define HTTP_SEGMENT_NZ 92
#define HTTP_SEGMENT_NZ_NC 93
#define HTTP_SP 115
#define HTTP_START_LINE 55
#define HTTP_STATUS_CODE 56
#define HTTP_STATUS_LINE 57
#define HTTP_SUB_DELIMS 101
#define HTTP_T_CODINGS 58
#define HTTP_T_RANKING 59
#define HTTP_TCHAR 60
#define HTTP_TE 9
#define HTTP_TOKEN 61
#define HTTP_TRAILER 10
#define HTTP_TRAILER_PART 62
#define HTTP_TRANSFER_CODING 63
#define HTTP_TRANSFER_ENCODING 11
#define HTTP_TRANSFER_EXTENSION 64
#define HTTP_TRANSFER_PARAMETER 65
#define HTTP_UNRESERVED 98
#define HTTP_UPGRADE 12
#define HTTP_URI 66
#define HTTP_URI_HOST 75
#define HTTP_URI_REFERENCE 68
#define HTTP_USERINFO 74
#define HTTP_VCHAR 116
#define HTTP_VIA 13
#define HTTP_WSP 117
#define RULE_COUNT_HTTP 118

// pointer to parser initialization data
extern void* vpHttpInit;

// Helper function(s) for setting rule/UDT name callbacks.
// Un-comment and replace named NULL with pointer to the appropriate callback function.
//  NOTE: This can easily be modified for setting AST callback functions:
//        Replace parser_callback with ast_callback and
//        vParserSetRuleCallback(vpParserCtx) with vAstSetRuleCallback(vpAstCtx) and
//        vParserSetUdtCallback(vpParserCtx) with vAstSetUdtCallback(vpAstCtx).
/****************************************************************
void vHttpRuleCallbacks(void* vpParserCtx){
    aint ui;
    parser_callback cb[RULE_COUNT_HTTP];
    cb[HTTP_ABSOLUTE_FORM] = NULL;
    cb[HTTP_ABSOLUTE_PATH] = NULL;
    cb[HTTP_ABSOLUTE_URI] = NULL;
    cb[HTTP_ALPHA] = NULL;
    cb[HTTP_ASTERISK_FORM] = NULL;
    cb[HTTP_AUTHORITY] = NULL;
    cb[HTTP_AUTHORITY_FORM] = NULL;
    cb[HTTP_BIT] = NULL;
    cb[HTTP_BWS] = NULL;
    cb[HTTP_CHAR] = NULL;
    cb[HTTP_CHUNK] = NULL;
    cb[HTTP_CHUNK_DATA] = NULL;
    cb[HTTP_CHUNK_EXT] = NULL;
    cb[HTTP_CHUNK_EXT_NAME] = NULL;
    cb[HTTP_CHUNK_EXT_VAL] = NULL;
    cb[HTTP_CHUNK_SIZE] = NULL;
    cb[HTTP_CHUNKED_BODY] = NULL;
    cb[HTTP_COMMENT] = NULL;
    cb[HTTP_CONNECTION] = NULL;
    cb[HTTP_CONNECTION_OPTION] = NULL;
    cb[HTTP_CONTENT_LENGTH] = NULL;
    cb[HTTP_CR] = NULL;
    cb[HTTP_CRLF] = NULL;
    cb[HTTP_CTEXT] = NULL;
    cb[HTTP_CTL] = NULL;
    cb[HTTP_DEC_OCTET] = NULL;
    cb[HTTP_DIGIT] = NULL;
    cb[HTTP_DQUOTE] = NULL;
    cb[HTTP_FIELD_CONTENT] = NULL;
    cb[HTTP_FIELD_NAME] = NULL;
    cb[HTTP_FIELD_VALUE] = NULL;
    cb[HTTP_FIELD_VCHAR] = NULL;
    cb[HTTP_FRAGMENT] = NULL;
    cb[HTTP_GEN_DELIMS] = NULL;
    cb[HTTP_H16] = NULL;
    cb[HTTP_HEADER_FIELD] = NULL;
    cb[HTTP_HEXDIG] = NULL;
    cb[HTTP_HIER_PART] = NULL;
    cb[HTTP_HOST] = NULL;
    cb[HTTP_HTAB] = NULL;
    cb[HTTP_HTTP_MESSAGE] = NULL;
    cb[HTTP_HTTP_NAME] = NULL;
    cb[HTTP_HTTP_URI] = NULL;
    cb[HTTP_HTTP_VERSION] = NULL;
    cb[HTTP_HTTPS_URI] = NULL;
    cb[HTTP_IP_LITERAL] = NULL;
    cb[HTTP_IPV4ADDRESS] = NULL;
    cb[HTTP_IPV6ADDRESS] = NULL;
    cb[HTTP_IPVFUTURE] = NULL;
    cb[HTTP_LAST_CHUNK] = NULL;
    cb[HTTP_LF] = NULL;
    cb[HTTP_LS32] = NULL;
    cb[HTTP_LWSP] = NULL;
    cb[HTTP_MESSAGE_BODY] = NULL;
    cb[HTTP_METHOD] = NULL;
    cb[HTTP_OBS_FOLD] = NULL;
    cb[HTTP_OBS_TEXT] = NULL;
    cb[HTTP_OCTET] = NULL;
    cb[HTTP_ORIGIN_FORM] = NULL;
    cb[HTTP_OWS] = NULL;
    cb[HTTP_PARTIAL_URI] = NULL;
    cb[HTTP_PATH] = NULL;
    cb[HTTP_PATH_ABEMPTY] = NULL;
    cb[HTTP_PATH_ABSOLUTE] = NULL;
    cb[HTTP_PATH_EMPTY] = NULL;
    cb[HTTP_PATH_NOSCHEME] = NULL;
    cb[HTTP_PATH_ROOTLESS] = NULL;
    cb[HTTP_PCHAR] = NULL;
    cb[HTTP_PCT_ENCODED] = NULL;
    cb[HTTP_PORT] = NULL;
    cb[HTTP_PROTOCOL] = NULL;
    cb[HTTP_PROTOCOL_NAME] = NULL;
    cb[HTTP_PROTOCOL_VERSION] = NULL;
    cb[HTTP_PSEUDONYM] = NULL;
    cb[HTTP_QDTEXT] = NULL;
    cb[HTTP_QUERY] = NULL;
    cb[HTTP_QUOTED_PAIR] = NULL;
    cb[HTTP_QUOTED_STRING] = NULL;
    cb[HTTP_RANK] = NULL;
    cb[HTTP_REASON_PHRASE] = NULL;
    cb[HTTP_RECEIVED_BY] = NULL;
    cb[HTTP_RECEIVED_PROTOCOL] = NULL;
    cb[HTTP_REG_NAME] = NULL;
    cb[HTTP_RELATIVE_PART] = NULL;
    cb[HTTP_RELATIVE_REF] = NULL;
    cb[HTTP_REQUEST_LINE] = NULL;
    cb[HTTP_REQUEST_TARGET] = NULL;
    cb[HTTP_RESERVED] = NULL;
    cb[HTTP_RWS] = NULL;
    cb[HTTP_SCHEME] = NULL;
    cb[HTTP_SEGMENT] = NULL;
    cb[HTTP_SEGMENT_NZ] = NULL;
    cb[HTTP_SEGMENT_NZ_NC] = NULL;
    cb[HTTP_SP] = NULL;
    cb[HTTP_START_LINE] = NULL;
    cb[HTTP_STATUS_CODE] = NULL;
    cb[HTTP_STATUS_LINE] = NULL;
    cb[HTTP_SUB_DELIMS] = NULL;
    cb[HTTP_T_CODINGS] = NULL;
    cb[HTTP_T_RANKING] = NULL;
    cb[HTTP_TCHAR] = NULL;
    cb[HTTP_TE] = NULL;
    cb[HTTP_TOKEN] = NULL;
    cb[HTTP_TRAILER] = NULL;
    cb[HTTP_TRAILER_PART] = NULL;
    cb[HTTP_TRANSFER_CODING] = NULL;
    cb[HTTP_TRANSFER_ENCODING] = NULL;
    cb[HTTP_TRANSFER_EXTENSION] = NULL;
    cb[HTTP_TRANSFER_PARAMETER] = NULL;
    cb[HTTP_UNRESERVED] = NULL;
    cb[HTTP_UPGRADE] = NULL;
    cb[HTTP_URI] = NULL;
    cb[HTTP_URI_HOST] = NULL;
    cb[HTTP_URI_REFERENCE] = NULL;
    cb[HTTP_USERINFO] = NULL;
    cb[HTTP_VCHAR] = NULL;
    cb[HTTP_VIA] = NULL;
    cb[HTTP_WSP] = NULL;
    for(ui = 0; ui < (aint)RULE_COUNT_HTTP; ui++){
        vParserSetRuleCallback(vpParserCtx, ui, cb[ui]);
    }
}
****************************************************************/

#endif /* _HTTP_H_ */
